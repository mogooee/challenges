{"ast":null,"code":"import{INIT_VALUE,KEY,OPERATOR_PRIORITY}from'../../constants/calculator';export const isNumber=value=>!Number.isNaN(Number(value));export const isOperator=value=>{const keys=Object.values(KEY);for(let i=0;i<keys.length;i+=1){if(value===keys[i]&&value!==KEY.POINT&&value!==KEY.CLEAR){return true;}}return false;};export const getPointer=value=>{if(!value){return\"\".concat(INIT_VALUE).concat(KEY.POINT);}if(!Number.isInteger(value)||String(value).at(-1)===KEY.POINT){return value;}return\"\".concat(value).concat(KEY.POINT);};const fixPoint=value=>{const FIXED_NUM=2;return Number.isInteger(value)?value:Number(value.toFixed(FIXED_NUM));};export const calc=value=>{const[n1,sign,n2]=value.split(' ');const num1=Number(n1);const num2=Number(n2);let answer=0;if(sign===KEY.PLUS){answer=num1+num2;}if(sign===KEY.MINUS){answer=num1-num2;}if(sign===KEY.MULTIPLE){answer=num1*num2;}if(sign===KEY.DIVIDE){answer=num1/num2;}if(sign===KEY.MOD){answer=num1%num2;}return fixPoint(answer);};export const convertInfixToPostfix=infix=>{const postFix=[];const stack=[];const isTopHighest=(top,cur)=>{return OPERATOR_PRIORITY[top]<=OPERATOR_PRIORITY[cur];};for(let i=0;i<infix.length;i+=1){const express=infix[i];if(express===KEY.OPEN_BRACKET){stack.push(express);}else if(express===KEY.CLOSE_BRACKET){while(stack.at(-1)!==KEY.OPEN_BRACKET){postFix.push(stack.pop());}stack.pop();}else if(express===KEY.MULTIPLE||express===KEY.DIVIDE||express===KEY.PLUS||express===KEY.MINUS){while(stack.length&&isTopHighest(stack.at(-1),express)){postFix.push(stack.pop());}stack.push(express);}else{postFix.push(express);}}while(stack.length){postFix.push(stack.pop());}return postFix;};export const calcPostFix=postFix=>{const stack=[];for(let i=0;i<postFix.length;i+=1){if(isNumber(postFix[i])){stack.push(postFix[i]);}else{const num2=stack.pop();const num1=stack.pop();const result=calc(\"\".concat(num1,\" \").concat(postFix[i],\" \").concat(num2));stack.push(result);}}return stack[0];};","map":{"version":3,"names":["INIT_VALUE","KEY","OPERATOR_PRIORITY","isNumber","value","Number","isNaN","isOperator","keys","Object","values","i","length","POINT","CLEAR","getPointer","concat","isInteger","String","at","fixPoint","FIXED_NUM","toFixed","calc","n1","sign","n2","split","num1","num2","answer","PLUS","MINUS","MULTIPLE","DIVIDE","MOD","convertInfixToPostfix","infix","postFix","stack","isTopHighest","top","cur","express","OPEN_BRACKET","push","CLOSE_BRACKET","pop","calcPostFix","result"],"sources":["/home/runner/work/challenges/challenges/src/utils/calculator/calc.ts"],"sourcesContent":["import { INIT_VALUE, KEY, OPERATOR_PRIORITY } from '../../constants/calculator';\n\nexport const isNumber = (value: string | number): boolean => !Number.isNaN(Number(value));\n\nexport const isOperator = (value: string | number): boolean => {\n  const keys = Object.values(KEY);\n  for (let i = 0; i < keys.length; i += 1) {\n    if (value === keys[i] && value !== KEY.POINT && value !== KEY.CLEAR) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const getPointer = (value: string | number) => {\n  if (!value) {\n    return `${INIT_VALUE}${KEY.POINT}`;\n  }\n  if (!Number.isInteger(value) || String(value).at(-1) === KEY.POINT) {\n    return value;\n  }\n  return `${value}${KEY.POINT}`;\n};\n\nconst fixPoint = (value: number): number => {\n  const FIXED_NUM = 2;\n  return Number.isInteger(value) ? value : Number(value.toFixed(FIXED_NUM));\n};\n\nexport const calc = (value: string): number => {\n  const [n1, sign, n2] = value.split(' ');\n  const num1 = Number(n1);\n  const num2 = Number(n2);\n  let answer = 0;\n\n  if (sign === KEY.PLUS) {\n    answer = num1 + num2;\n  }\n  if (sign === KEY.MINUS) {\n    answer = num1 - num2;\n  }\n  if (sign === KEY.MULTIPLE) {\n    answer = num1 * num2;\n  }\n  if (sign === KEY.DIVIDE) {\n    answer = num1 / num2;\n  }\n  if (sign === KEY.MOD) {\n    answer = num1 % num2;\n  }\n\n  return fixPoint(answer);\n};\n\nexport const convertInfixToPostfix = (infix: (number | string)[]) => {\n  const postFix = [];\n  const stack = [];\n\n  const isTopHighest = (top: string, cur: string): boolean => {\n    return OPERATOR_PRIORITY[top] <= OPERATOR_PRIORITY[cur];\n  };\n\n  for (let i = 0; i < infix.length; i += 1) {\n    const express = infix[i];\n    if (express === KEY.OPEN_BRACKET) {\n      stack.push(express);\n    } else if (express === KEY.CLOSE_BRACKET) {\n      while (stack.at(-1) !== KEY.OPEN_BRACKET) {\n        postFix.push(stack.pop());\n      }\n      stack.pop();\n    } else if (express === KEY.MULTIPLE || express === KEY.DIVIDE || express === KEY.PLUS || express === KEY.MINUS) {\n      while (stack.length && isTopHighest(stack.at(-1)!, express)) {\n        postFix.push(stack.pop());\n      }\n      stack.push(express);\n    } else {\n      postFix.push(express);\n    }\n  }\n\n  while (stack.length) {\n    postFix.push(stack.pop());\n  }\n\n  return postFix as (string | number)[];\n};\n\nexport const calcPostFix = (postFix: (string | number)[]): number => {\n  const stack = [];\n\n  for (let i = 0; i < postFix.length; i += 1) {\n    if (isNumber(postFix[i])) {\n      stack.push(postFix[i]);\n    } else {\n      const num2 = stack.pop();\n      const num1 = stack.pop();\n      const result = calc(`${num1} ${postFix[i]} ${num2}`);\n      stack.push(result);\n    }\n  }\n\n  return stack[0] as number;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}